{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Recursive Python program for level\
# order traversal of Binary Tree\
\
# A node structure\
class Node:\
\
	# A utility function to create a new node\
	def __init__(self, key):\
		self.data = key\
		self.left = None\
		self.right = None\
\
\
# Function to print level order traversal of tree\
def printLevelOrder(root):\
	h = height(root)\
	for i in range(1, h+1):\
		printCurrentLevel(root, i)\
\
\
# Print nodes at a current level\
def printCurrentLevel(root , level):\
	if root is None:\
		return\
	if level == 1:\
		print(root.data,end=" ")\
	elif level > 1 :\
		printCurrentLevel(root.left , level-1)\
		printCurrentLevel(root.right , level-1)\
\
\
""" Compute the height of a tree--the number of nodes\
	along the longest path from the root node down to\
	the farthest leaf node\
"""\
def height(node):\
	if node is None:\
		return 0\
	else :\
		# Compute the height of each subtree\
		lheight = height(node.left)\
		rheight = height(node.right)\
\
		#Use the larger one\
		if lheight > rheight :\
			return lheight+1\
		else:\
			return rheight+1\
\
# Driver program to test above function\
root = Node(1)\
root.left = Node(2)\
root.right = Node(3)\
root.left.left = Node(4)\
root.left.right = Node(5)\
\
print("Level order traversal of binary tree is -")\
printLevelOrder(root)\
\
#This code is contributed by Nikhil Kumar Singh(nickzuck_007)\
}